{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "suiteName": {
            "type": "string",
            "metadata": {
                "description": "The name of the suite"
            }
        },
        "suiteType": {
            "type": "string",
            "metadata": {
                "description": "The suite type for resource tracking"
            }
        },
        "aadTenant": {
            "type": "string",
            "metadata": {
                "description": "The name of the service Tenant"
            }
        },
        "aadTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The AAD tenant identifier (GUID)"
            }
        },
        "aadInstance": {
            "type": "string",
            "defaultValue": "https://login.microsoftonline.com/{0}",
            "metadata": {
                "description": "Url of the AAD login page (example: https://login.microsoftonline.de/{0})"
            }
        },
        "aadClientId": {
            "type": "string",
            "metadata": {
                "description": "AAD application identifier (GUID)"
            }
        },
        "aadClientIdTwin": {
            "type": "string",
            "metadata": {
                "description": "AAD application identifier (GUID for the micro service)"
            }
        },
        "webSitesServicePrincipalObjectId": {
            "type": "string",
            "defaultValue": "f8daea97-62e7-4026-becf-13c2ea98e8b4",
            "metadata": {
                "description": "The object ID of the service principal Microsoft.Azure.WebSites (f8daea97-62e7-4026-becf-13c2ea98e8b4)."
            }
        },
        "mapApiQueryKey": {
            "type": "string",
            "defaultValue": "0",
            "metadata": {
                "description": "Azure Maps Api Query key - default is disabled"
            }
        },
        "storageName": {
            "type": "string",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "The storage Sku name"
            }
        },
        "storageKind": {
            "type": "string",
            "defaultValue": "Storage",
            "metadata": {
                "description": "The kind of the storage account."
            }
        },
        "storageEndpointSuffix": {
            "type": "string",
            "metadata": {
                "description": "Suffix added to Azure Storage hostname (examples: core.windows.net, core.cloudapi.de)"
            }
        },
        "iotHubName": {
            "type": "string",
            "metadata": {
                "description": "The name of the iotHub"
            }
        },
        "iotHubSkuName": {
            "type": "string",
            "defaultValue": "S1",
            "metadata": {
                "description": "The Iothub Sku name"
            }
        },
        "iotHubSkuCapacityUnits": {
            "type": "int",
            "minValue": 1,
            "defaultValue": 3,
            "metadata": {
                "description": "Number of desired IoT Hub units."
            }
        },
        "iotHubPartitionCount": {
            "type": "int",
            "defaultValue": 4,
            "metadata": {
                "description": "The iot hub endpoint partition count"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "rdxEnvironmentName": {
            "type": "string",
            "maxLength": 90,
            "metadata": {
                "description": "Name of the environment. The name cannot include:   '<', '>', '%', '&', ':', '\\', '?', '/' and any control characters. All other characters are allowed."
            }
        },
        "rdxEnvironmentSkuName": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1",
                "S2"
            ]
        },
        "rdxEnvironmentSkuCapacity": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 1,
            "maxValue": 10
        },
        "rdxEnvironmentDataRetentionTime": {
            "type": "string",
            "defaultValue": "P30D",
            "metadata": {
                "description": "The minimum timespan the environment's events will be available for query. The value must be specified in the ISO 8601 format, e.g. \"P30D\" for a retention policy of 30 days."
            }
        },
        "rdxDnsName": {
            "type": "string",
            "maxLength": 90,
            "metadata": {
                "description": "DNS host of the rdx service."
            }
        },
        "rdxAuthenticationClientSecret": {
            "type": "securestring",
            "maxLength": 90,
            "metadata": {
                "description": "Key to access the RDX web api."
            }
        },
        "rdxAccessPolicyPrincipalObjectId": {
            "type": "string",
            "metadata": {
                "description": "Object Id of the AAD user or service principal that will have access to the environment. Available from the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets"
            }
        },
        "rdxOwnerServicePrincipalObjectId": {
            "type": "string",
            "metadata": {
                "description": "Object Id of the AAD user or service principal that will have contributor access to the environment. Available from the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets"
            }
        },
        "webAppUri": {
            "type": "string",
            "defaultValue": "https://iotsuitestorage.blob.core.windows.net/packages/Connectedfactory/current/WebApp.zip?st=2017-06-01T06%3A55%3A00Z&se=2022-06-02T06%3A55%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=eIJmoHBAI4p6amXWAVs%2BE46ADil81qlLvbPR92cxytw%3D"
        },
        "webPlanSkuName": {
            "type": "string",
            "defaultValue": "S1",
            "metadata": {
                "description": "The Sku name of the serverfarm running the webapp-"
            }
        },
        "webPlanWorkerSize": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "The size of the container supported by the serverfarm running the webapp."
            }
        },
        "webPlanWorkerCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The number of instances supported by the serverfarm running the webapp."
            }
        },
        "webPlanAlwaysOn": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Controls if the serverfarm running the webapp should be always on."
            }
        },
        "keyVaultSkuName": {
            "type": "string",
            "defaultValue": "Standard",
            "metadata": {
                "description": "The KeyVault SKU to use."
            }
        },
        "keyVaultSecretBaseName": {
            "type": "string",
            "defaultValue": "UaWebClient",
            "metadata": {
                "description": "Base fileame of the secret for the OPC UA communciation."
            }
        },
        "keyVaultVmSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Value of the secret for the OPC UA communciation in base64 encoded Cert format."
            }
        },
        "keyVaultWebsiteSecret": {
            "type": "securestring",
            "defaultValue": "unknown",
            "metadata": {
                "description": "Value of the secret for the OPC UA communciation in base64 encoded Pfx format."
            }
        },
        "uaSecretThumbprint": {
            "type": "string",
            "defaultValue": "unknown",
            "metadata": {
                "description": "Thumbprint of the secret for the OPC UA communciation."
            }
        },
        "uaSecretPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the secret."
            }
        },
        "vmArmTemplateUri": {
            "type": "string",
            "defaultValue": "https://iotsuitestorage.blob.core.windows.net/packages/Connectedfactory/current/FactorySimulation.json?st=2017-06-01T06%3A55%3A00Z&se=2022-06-02T06%3A55%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=YfelLVSPLoJj0HOEFre02Wd9E00e8ZHzAvnBF8QBiTg%3D",
            "metadata": {
                "description": "URI containing files for deployment."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "metadata": {
                "description": "The VM size used for the virtual machine."
            }
        },
        "initSimulationUri": {
            "type": "string",
            "defaultValue": "https://iotsuitestorage.blob.core.windows.net/packages/Connectedfactory/current/initsimulation?st=2017-06-01T06%3A55%3A00Z&se=2022-06-02T06%3A55%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=2xGMM2fTF%2BfKgl1lLnlhln5j9U7AzlcYoxmKozFk56g%3D",
            "metadata": {
                "description": "URI containing script to init the VM."
            }
        },
        "simulationUri": {
            "type": "string",
            "defaultValue": "https://iotsuitestorage.blob.core.windows.net/packages/Connectedfactory/current/simulation?st=2017-06-01T06%3A55%3A00Z&se=2022-06-02T06%3A55%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=c6b7OKjqDwO6Ko%2FxfM5AY%2Fr%2F04wHHt4YJFG5gQ8%2FiJQ%3D",
            "metadata": {
                "description": "URI containing the archive with all files for the simulation."
            }
        },

        "aadClientSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "AAD application secret."
            }
        },
        "aadServicePrincipalObjectId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "AAD service object identifier (GUID)"
            }
        },
        "authAudience": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Audience to validate token audience against."
            }
        },
        "solutionName": {
            "type": "string",
            "defaultValue": "iiotservices",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Strong",
            "metadata": {
                "description": "The documentDB default consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubRetentionInDays": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The event hub message retention in days"
            }
        },
        "eventHubPartitionCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The event hub partition count"
            }
        },
        "eventHubNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubSkuTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Event Hub SKU Tier"
            }
        },
        "eventHubSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure Event Hub SKU Capacity"
            }
        },
        "eventHubAuthorizationName": {
            "type": "string",
            "defaultValue": "[concat('iothubroutes-', parameters('iotHubName'))]",
            "metadata": {
                "description": "Authorization Rule Name for Event Hub endpoint in Iot Hub"
            }
        },
        "serviceBusEndpointSuffix": {
            "type": "string",
            "defaultValue": "servicebus.windows.net",
            "allowedValues": [
                "servicebus.windows.net",
                "servicebus.chinacloudapi.cn"
            ],
            "metadata": {
                "description": "Suffix added to Service Bus endpoint"
            }
        },
        "vmNameTwin": {
            "type": "string",
            "defaultValue": "[concat('vm-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the Linux Virtual Machine"
            }
        },
        "vmSizeTwin": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "allowedValues": [
                    "Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4", "Standard_A5",
                    "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
                    "Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4",
                    "Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
                    "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
                    "Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
                    "Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
                    "Standard_DS1", "Standard_DS2", "Standard_DS3", "Standard_DS4",
                    "Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
                    "Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
            ],
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "ubuntuOSVersion": {
            "type": "string",
            "defaultValue": "16.04.0-LTS",
            "allowedValues": [
                "12.04.5-LTS",
                "14.04.5-LTS",
                "15.10",
                "16.04.0-LTS"
            ],
            "metadata": {
                "description": "The Ubuntu version for the Virtual Machine."
            }
        },
        "branchName": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The branch from which to procure scripts during VM initialization."
            }
        },
        "adminUsernameTwin": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Linux Virtual Machine."
            }
        },
        "adminPasswordTwin": {
            "type": "securestring",
            "metadata": {
                "description": "User password for the Linux Virtual Machines, must between 12 and 72 characters long and have 3 of the following: 1 uppercase character, 1 lowercase character, 1 number and 1 special character that is not slash (\\) or dash (-)"
            }
        },
        "vmFQDNSuffix": {
            "type": "string",
            "defaultValue": "cloudapp.azure.com",
            "allowedValues": [
                "cloudapp.azure.com",
                "cloudapp.chinacloudapi.cn",
                "cloudapp.azure.de"
            ]
        },
        "azureWebsiteName": {
            "type": "string",
            "defaultValue": "[concat(parameters('solutionName'), take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "The name of the azure website that you want to create. It will be of format {azureWebsiteName}.azurewebsites.net"
            }
        },
        "keyVaultNameTwin": {
            "type": "string",
            "defaultValue": "[concat('keyvault-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The resource name of the KeyVault"
            }
        },
        "keyVaultDisplayNameTwin": {
            "type": "string",
            "defaultValue": "[parameters('solutionName')]",
            "metadata": {
                "description": "The display name for the KeyVault"
            }
        },
        "containerRegistryPrefix": {
            "type": "string",
            "metadata": {
                "description": "An optional prefix defining the registry and path of the micro services and modules that should be deployed."
            },
            "defaultValue": ""
        },
        "remoteEndpointSSLThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "This is the thumbprint of the HTTPS SSL Certificate"
            },
            "defaultValue": ""
        },
        "remoteEndpointCertificate": {
            "type": "securestring",
            "metadata": {
                "description": "The certficate that needs to be updated to the VM"
            },
            "defaultValue": ""
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "storageVersion": "2017-06-01",
        "storageId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
        "webSiteVersion": "2016-08-01",
        "webPlanVersion": "2016-09-01",
        "webPlanName": "[concat(parameters('suiteName'), '-plan')]",
        "webSiteName": "[parameters('suiteName')]",
        "azureMapsName": "[concat(parameters('suiteName'), '-map')]",
        "azureMapsVersion": "2018-05-01",
        "AzureMapsPricingSpec": "S0",
        "storageEndpointSuffix": "[parameters('storageEndpointSuffix')]",
        "iotHubVersion": "2018-04-01",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubContainerName": "[parameters('iotHubName')]",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "rdxVersion": "2017-02-28-preview",
        "rdxCGName": "rdxcg",
        "telemetryCGName": "telemetrycg",
        "rdxIotHubKeyName": "service",
        "rdxEventSourceName": "[parameters('rdxEnvironmentName')]",
        "rdxEventSourceDisplayName": "[concat(parameters('suiteName'), '-Eventsource')]",
        "rdxIotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('rdxIotHubKeyName'))]",
        "delimiters": [ ".", "//" ],
        "rdxEnvironmentDisplayName": "[parameters('suiteName')]",
        "rdxEnvironmentTagsOptions": [
            null,
            { "displayName": "[variables('rdxEnvironmentDisplayName')]" }
        ],
        "rdxEnvironmentTagsValue": "[variables('rdxEnvironmentTagsOptions')[length(take(variables('rdxEnvironmentDisplayName'), 1))]]",
        "rdxEventSourceTagsOptions": [
            null,
            { "displayName": "[variables('rdxEventSourceDisplayName')]" }
        ],
        "rdxEventSourceTagsValue": "[variables('rdxEventSourceTagsOptions')[length(take(variables('rdxEventSourceDisplayName'), 1))]]",
        "rdxAccessPolicyName": "[concat(parameters('suiteName'),'-access')]",
        "rdxAccessPolicyRole": "Reader",
        "rdxOwnerPolicyRole": "Contributor",
        "rdxTimestampPropertyName": "Value.SourceTimestamp",
        "certificateVersion": "2016-03-01",
        "certificateName": "[parameters('suiteName')]",
        "keyVaultVersion": "2015-06-01",
        "keyVaultName": "[concat(take(replace(parameters('suiteName'),'--',''), 11), uniqueString(subscription().id, parameters('suiteName')))]",
        "keyVaultDisplayName": "[parameters('suiteName')]",
        "keyVaultVmSecretName": "[concat(parameters('keyVaultSecretBaseName'), '-VM')]",
        "keyVaultVmSecretJson": {
            "data": "[parameters('keyVaultVmSecret')]",
            "dataType": "pfx",
            "password": "[parameters('uaSecretPassword')]"
        },
        "keyVaultVmSecretBase64": "[base64(string(variables('keyVaultVmSecretJson')))]",
        "keyVaultWebsiteSecretName": "[concat(parameters('keyVaultSecretBaseName'), '-Website')]",
        "keyVaultAccessPolicies": [
            {
                "objectId": "[parameters('webSitesServicePrincipalObjectId')]",
                "tenantId": "[parameters('aadTenant')]",
                "permissions": {
                    "keys": [
                        "get"
                    ],
                    "secrets": [
                        "get"
                    ],
                    "certificates": [
                        "get"
                    ]
                }
            }
        ],
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "eventHubApiVersion": "2017-04-01",
        "eventHubKeyName": "RootManageSharedAccessKey",
        "eventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubKeyName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventHubRouteKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventHubAuthorizationName'))]",
        
        "deviceNotificationRouteName": "DeviceNotifications",
        "onboardingConsumerGroupName": "onboarding",
        
        "computeApiVersion": "2017-03-30",
        "vmFQDN": "[concat(parameters('vmNameTwin'), '.', variables('location'), '.', parameters('vmFQDNSuffix'))]",
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "vmStorageAccountContainerName": "vhds",
        "osDiskName": "[concat(parameters('solutionName'), '-osdisk')]",
        "networkApiVersion": "2017-06-01",
        "vnetName": "[concat(parameters('solutionName'), '-vnet')]",
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
        "vnetAddressPrefix": "10.0.0.0/16",
        "networkSecurityGroupName": "[concat(parameters('solutionName'), '-nsg')]",
        "subnetName": "default",
        "subnetPrefix": "10.0.0.0/24",
        "subnetResourceId": "[concat(variables('vnetResourceId'),'/subnets/',variables('subnetName'))]",
        "publicIPName": "[concat(parameters('solutionName'), '-public-ip')]",
        "nicName": "[concat(parameters('solutionName'), '-nic')]",
        "servicesBranch": "[parameters('branchName')]",
        "servicesRepoUrl": "https://raw.githubusercontent.com/Azure/azure-iiot-services/",
        "proxyBranch": "master",
        "hostingPlanName": "[parameters('azureWebsiteName')]",
        "appServiceVersion": "2018-02-01",
        "appServicePlanVersion": "2018-02-01",
        "appServiceSku": "S1",
        "appServiceWorkerSize": "0"
    },
  "resources": [
    {
      "name": "linkedVmTemplate",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
        "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultVmSecretName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[parameters('vmArmTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "suiteName": {
            "value": "[parameters('suiteName')]"
          },
          "suiteType": {
            "value": "[parameters('suiteType')]"
          },
          "storageName": {
            "value": "[parameters('storageName')]"
          },
          "storageSkuName": {
            "value": "[parameters('storageSkuName')]"
          },
          "storageKind": {
            "value": "[parameters('storageKind')]"
          },
          "storageEndpointSuffix": {
            "value": "[parameters('storageEndpointSuffix')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "initSimulationUri": {
            "value": "[parameters('initSimulationUri')]"
          },
          "simulationUri": {
            "value": "[parameters('simulationUri')]"
          },
          "iotHubOwnerConnectionString": {
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]"
          },
          "keyVaultId": {
            "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
          },
          "keyVaultSecretUrl": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultVmSecretName'))).secretUriWithVersion]"
          },
          "uaSecretThumbprint": {
            "value": "[parameters('uaSecretThumbprint')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageName')]",
      "apiVersion": "[variables('storageVersion')]",
      "location": "[variables('location')]",
      "tags": {
        "IotSuiteType": "[parameters('suiteType')]"
      },
      "kind": "[parameters('storageKind')]",
      "sku": {
        "name": "[parameters('storageSkuName')]"
      },
      "properties": {
        "networkAcls": {
            "bypass": "AzureServices",
            "virtualNetworkRules": [],
            "ipRules": [],
            "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
            "services": {
                "file": {
                    "enabled": true
                },
                "blob": {
                    "enabled": true
                }
            },
            "keySource": "Microsoft.Storage"
        }
        
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Devices/Iothubs",
      "name": "[parameters('iotHubName')]",
      "apiVersion": "[variables('iotHubVersion')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('iotHubSkuName')]",
        "capacity": "[parameters('iotHubSkuCapacityUnits')]",
        "tier": "[parameters('iotHubTier')]"
      },
      "tags": {
        "IotSuiteType": "[parameters('suiteType')]"
      },
      "properties": {
        "location": "[variables('location')]",
        "ipFilterRules": [],
        "eventHubEndpoints": {
            "events": {
                "retentionTimeInDays": 1,
                "partitionCount": "[parameters('iotHubPartitionCount')]"
            },
            "operationsMonitoringEvents": {
                "retentionTimeInDays": 1,
                "partitionCount": 4
            }
        },
        "routing": {
            "endpoints": {
                "serviceBusQueues": [],
                "serviceBusTopics": [],
                "eventHubs": [],
                "storageContainers": []
            },
            "routes": [],
            "fallbackRoute": {
                "name": "$fallback",
                "source": "DeviceMessages",
                "condition": "true",
                "endpointNames": [
                    "events"
                ],
                "isEnabled": true
            }
        },
        "storageEndpoints": {
            "$default": {
                "sasTtlAsIso8601": "PT1H",
                "connectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listKeys(variables('storageId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
                "containerName": "[variables('iotHubContainerName')]"
            }
        },
        "messagingEndpoints": {
            "fileNotifications": {
                "lockDurationAsIso8601": "PT1M",
                "ttlAsIso8601": "PT1H",
                "maxDeliveryCount": 10
            }
        },
        "enableFileUploadNotifications": true,
        "cloudToDevice": {
          "maxDeliveryCount": 10,
          "defaultTtlAsIso8601": "PT1H",
          "feedback": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "features": "None"
      },
      "dependsOn": [
        "[variables('storageId')]"
      ]
    },
    {
        "comments": "Consumer Group of IoT Hub",
        "apiVersion": "[variables('iotHubVersion')]",
        "name": "[concat(parameters('iotHubName'), '/events/', variables('onboardingConsumerGroupName'))]",
        "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
        "dependsOn": [
            "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
        ]
    },
    {
      "name": "[concat(parameters('iotHubName'), '/events/', variables('rdxCGName'))]",
      "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "[variables('iotHubVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
      ]
    },
    {
      "name": "[concat(parameters('iotHubName'), '/events/', variables('telemetryCGName'))]",
      "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "[variables('iotHubVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
      ]
    },
    {
      "type": "Microsoft.TimeSeriesInsights/environments",
      "name": "[parameters('rdxEnvironmentName')]",
      "apiVersion": "[variables('rdxVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "dataRetentionTime": "[parameters('rdxEnvironmentDataRetentionTime')]"
      },
      "sku": {
        "name": "[parameters('rdxEnvironmentSkuName')]",
        "capacity": "[parameters('rdxEnvironmentSkuCapacity')]"
      },
      "tags": "[variables('rdxEnvironmentTagsValue')]",
      "dependsOn": [
        "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
      ],
      "resources": [
        {
          "type": "eventsources",
          "name": "[variables('rdxEventSourceName')]",
          "apiVersion": "[variables('rdxVersion')]",
          "location": "[variables('location')]",
          "kind": "Microsoft.EventHub",
          "properties": {
            "eventSourceResourceId": "[variables('iotHubResourceId')]",
            "serviceBusNamespace": "[split(reference(variables('iotHubResourceId'), variables('iotHubVersion')).eventHubEndpoints.events.endpoint, variables('delimiters'))[1]]",
            "eventHubName": "[reference(variables('iotHubResourceId'), variables('iotHubVersion')).eventHubEndpoints.events.path]",
            "consumerGroupName": "[variables('rdxCGName')]",
            "keyName": "[variables('rdxIotHubKeyName')]",
            "sharedAccessKey": "[concat(listkeys(variables('rdxIotHubKeyResource'), variables('iotHubVersion')).primaryKey)]",
            "timestampPropertyName": "variables('rdxTimestampPropertyName')"
          },
          "tags": "[variables('rdxEventSourceTagsValue')]",
          "dependsOn": [
            "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('rdxEnvironmentName'))]"
          ]
        },
        {
          "type": "accessPolicies",
          "name": "[variables('rdxAccessPolicyName')]",
          "apiVersion": "[variables('rdxVersion')]",
          "properties": {
            "principalObjectId": "[parameters('rdxAccessPolicyPrincipalObjectId')]",
            "roles": [
              "[variables('rdxAccessPolicyRole')]"
            ]
          },
          "dependsOn": [
            "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('rdxEnvironmentName'))]"
          ]
        },
        {
          "type": "accessPolicies",
          "name": "OwnerAccess",
          "apiVersion": "[variables('rdxVersion')]",
          "properties": {
            "principalObjectId": "[parameters('rdxOwnerServicePrincipalObjectId')]",
            "roles": [
              "[variables('rdxOwnerPolicyRole')]"
            ]
          },
          "dependsOn": [
            "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('rdxEnvironmentName'))]"
          ]
        }
      ]
    },
    {
      "name": "[variables('webPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "[variables('webPlanVersion')]",
      "location": "[variables('location')]",
      "tags": {
        "IotSuiteType": "[parameters('suiteType')]"
      },
      "sku": {
        "Name": "[parameters('webPlanSkuName')]"
      },
      "properties": {
        "name": "[variables('webPlanName')]",
        "workerSizeId": "[parameters('webPlanWorkerSize')]",
        "numberOfWorkers": "[parameters('webPlanWorkerCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
        "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('rdxEnvironmentName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "[variables('keyVaultVersion')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "[variables('keyVaultDisplayName')]"
      },
      "properties": {
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": false,
        "enabledForVolumeEncryption": false,
        "sku": {
          "name": "[parameters('keyVaultSkuName')]",
          "family": "A"
        },
        "tenantId": "[parameters('aadTenant')]",
        "accessPolicies": "[variables('keyVaultAccessPolicies')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultVmSecretName'))]",
      "apiVersion": "[variables('keyVaultVersion')]",
      "properties": {
        "value": "[variables('keyVaultVmSecretBase64')]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultWebsiteSecretName'))]",
      "apiVersion": "[variables('keyVaultVersion')]",
      "properties": {
        "value": "[parameters('keyVaultWebsiteSecret')]",
        "contentType": "application/x-pkcs12"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/certificates",
      "name": "[variables('certificateName')]",
      "apiVersion": "[variables('certificateVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "keyVaultSecretName": "[variables('keyVaultWebsiteSecretName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('webPlanName'))]"
      },
        "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', variables('webPlanName'))]",
            "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultWebsiteSecretName'))]"
        ]
    },
    {
      "name": "[variables('webSiteName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('webSiteVersion')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('webPlanName'))]",
        "[resourceId('Microsoft.Web/certificates', variables('certificateName'))]"
      ],
      "tags": {
        "IotSuiteType": "[parameters('suiteType')]"
      },
      "properties": {
        "serverFarmId": "[variables('webPlanName')]",
        "siteConfig": {
          "AlwaysOn": "[parameters('webPlanAlwaysOn')]"
        }
      },
      "resources": [
        {
          "name": "MSDeploy",
          "type": "extensions",
          "apiVersion": "[variables('webSiteVersion')]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]"
          ],
          "properties": {
            "packageUri": "[parameters('webAppUri')]",
            "connectionString": "",
            "dbType": ""
          }
        },
        {
          "name": "Appsettings",
          "type": "config",
          "apiVersion": "[variables('webSiteVersion')]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]",
            "[concat('Microsoft.Web/Sites/', variables('webSiteName'), '/Extensions/MSDeploy')]"
          ],
          "properties": {
            "SolutionName": "[variables('webSiteName')]",
            "SolutionStorageAccountConnectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageId'), variables('storageVersion')).keys[0].value)]",
            "AadTenant": "[parameters('aadTenant')]",
            "AadInstance": "[parameters('aadInstance')]",
            "AadClientId": "[parameters('aadClientId')]",
            "IotHubOwnerConnectionString": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]",
            "IotHubEventHubName": "[reference(variables('iotHubResourceId'), variables('iotHubVersion')).eventHubEndpoints.events.path]",
            "IotHubEventHubEndpointIotHubOwnerConnectionString": "[concat('Endpoint=', reference(variables('iotHubResourceId'), variables('iotHubVersion')).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]",
            "IotHubTelemetryConsumerGroup": "[variables('telemetryCGName')]",
            "IotHubRdxConsumerGroup": "[variables('rdxCGName')]",
            "RdxAuthenticationClientSecret": "[parameters('rdxAuthenticationClientSecret')]",
            "RdxDnsName": "[parameters('rdxDnsName')]",
            "RdxEnvironmentId": "[reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('rdxEnvironmentName'))).dataAccessId]",
            "MapApiQueryKey": "[listkeys(variables('azureMapsName'), variables('azureMapsVersion')).primaryKey]",
            "RegistryService": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0], '/registry/')]",
            "TwinService": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0], '/twin/')]",
            "Audience": "[parameters('authAudience')]",
            "ClientSecret": "[parameters('aadClientSecret')]",
            "WEBSITE_LOAD_CERTIFICATES": "*"
          }
        }
      ]
    },
    {
        "type": "Microsoft.Maps/accounts",
        "sku": {
          "name": "[variables('AzureMapsPricingSpec')]"
        },
        "name": "[variables('azureMapsName')]",
        "apiVersion": "[variables('azureMapsVersion')]",
        "location": "global"
    },


    {
        "comments": "Azure CosmosDb",
        "apiVersion": "[variables('documentDBApiVersion')]",
        "type": "Microsoft.DocumentDb/databaseAccounts",
        "name": "[parameters('documentDBName')]",
        "location": "[variables('location')]",
        "properties": {
            "name": "[parameters('documentDBName')]",
            "databaseAccountOfferType": "standard",
            "consistencyPolicy": {
                "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
            }
        },
        "dependsOn": []
    },
    {
        "comments": "Azure Event Hub Namespace",
        "apiVersion": "[variables('eventHubApiVersion')]",
        "type": "Microsoft.EventHub/namespaces",
        "name": "[parameters('eventHubNamespaceName')]",
        "location": "[variables('location')]",
        "sku": {
            "name": "[parameters('eventHubSkuTier')]",
            "tier": "[parameters('eventHubSkuTier')]",
            "capacity": "[parameters('eventHubSkuCapacity')]"
        },
        "properties": {
            "isAutoInflateEnabled": false,
            "maximumThroughputUnits": 0
        }
    },
    {
        "comments": "Azure Event Hub",
        "type": "Microsoft.EventHub/namespaces/eventhubs",
        "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
        "apiVersion": "[variables('eventHubApiVersion')]",
        "location": "[variables('location')]",
        "properties": {
            "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
            "partitionCount": "[parameters('eventHubPartitionCount')]",
            "status": "Active"
        },
        "dependsOn": [
            "[variables('eventHubNamespaceResourceId')]"
        ]
    },
    {
        "comments": "Event Hub Authorization for Iot Hub",
        "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
        "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/', parameters('eventHubAuthorizationName'))]",
        "apiVersion":  "[variables('eventHubApiVersion')]",
        "location": "[variables('location')]",
        "properties": {
            "rights": [
                "Send"
            ]
        },
        "dependsOn": [
            "[variables('eventHubNamespaceResourceId')]",
            "[variables('eventHubResourceId')]"
        ]
    },
    {
        "type": "Microsoft.KeyVault/vaults",
        "name": "[parameters('keyVaultNameTwin')]",
        "apiVersion": "[variables('keyVaultVersion')]",
        "location": "[resourceGroup().location]",
        "tags": {
            "displayName": "[parameters('keyVaultDisplayNameTwin')]"
        },
        "properties": {
            "enabledForDeployment": true,
            "enabledForTemplateDeployment": false,
            "enabledForVolumeEncryption": false,
            "sku": {
                "name": "[parameters('keyVaultSkuName')]",
                "family": "A"
            },
            "tenantId": "[parameters('aadTenantId')]",
            "accessPolicies": []
        }
    },
    {
        "comments": "AppService plan to host the Application Gateway Web App",
        "type": "Microsoft.Web/serverfarms",
        "sku": {
            "name": "[variables('appServiceSku')]",
            "capacity": "[variables('appServiceWorkerSize')]"
        },
        "name": "[variables('hostingPlanName')]",
        "apiVersion": "[variables('appServicePlanVersion')]",
        "location": "[resourceGroup().location]",
        "properties": {
            "name": "[variables('hostingPlanName')]"
        }
    },
    {
        "comments": "Application Gateway Web App",
        "type": "Microsoft.Web/sites",
        "name": "[parameters('azureWebsiteName')]",
        "apiVersion": "[variables('appServiceVersion')]",
        "location": "[resourceGroup().location]",
        "properties": {
            "enabled": true,
            "clientAffinityEnabled": false,
            "serverFarmId": "[variables('hostingPlanName')]",
            "siteConfig": {
                "appSettings": [
                    {
                        "name": "REMOTE_ENDPOINT",
                        "value": "[concat('https://', reference(variables('publicIPName')).dnsSettings.fqdn)]"
                    },
                    {
                        "name": "REMOTE_ENDPOINT_SSL_THUMBPRINT",
                        "value": "[parameters('remoteEndpointSSLThumbprint')]"
                    }
                ]
            }
        },
        "resources": [
            {
                "apiVersion": "[variables('appServiceVersion')]",
                "name": "web",
                "type": "sourcecontrols",
                "properties": {
                    "RepoUrl": "https://github.com/Azure/reverse-proxy-dotnet.git",
                    "branch": "[variables('proxyBranch')]",
                    "IsManualIntegration": true
                },
                "dependsOn": [
                    "[resourceId('Microsoft.Web/Sites', parameters('azureWebsiteName'))]"
                ]
            },
            {
                "apiVersion": "[variables('appServiceVersion')]",
                "name": "web",
                "type": "config",
                "dependsOn": [
                    "[resourceId('Microsoft.Web/sites', parameters('azureWebsiteName'))]"
                ],
                "properties": {
                    "numberOfWorkers": 1,
                    "requestTracingEnabled": true,
                    "httpLoggingEnabled": true,
                    "detailedErrorLoggingEnabled": true,
                    "alwaysOn": true,
                    "minTlsVersion": "1.2"
                }
            }
        ],
        "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
        ]
    },
    {
        "comments": "Security rules used for the VM network interface",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('networkSecurityGroupName')]",
        "apiVersion": "[variables('networkApiVersion')]",
        "location": "[variables('location')]",
        "properties": {
            "securityRules": [
                {
                    "name": "UASC",
                    "properties": {
                        "protocol": "TCP",
                        "sourcePortRange": "*",
                        "destinationPortRange": "4840",
                        "sourceAddressPrefix": "*",
                        "destinationAddressPrefix": "*",
                        "access": "Allow",
                        "priority": 100,
                        "direction": "Inbound"
                    }
                },
                {
                    "name": "HTTPS",
                    "properties": {
                        "protocol": "TCP",
                        "sourcePortRange": "*",
                        "destinationPortRange": "443",
                        "sourceAddressPrefix": "*",
                        "destinationAddressPrefix": "*",
                        "access": "Allow",
                        "priority": 101,
                        "direction": "Inbound"
                    }
                },
                {
                    "name": "SSH",
                    "properties": {
                        "protocol": "TCP",
                        "sourcePortRange": "*",
                        "destinationPortRange": "22",
                        "sourceAddressPrefix": "*",
                        "destinationAddressPrefix": "*",
                        "access": "Deny",
                        "priority": 102,
                        "direction": "Inbound"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('vnetName')]",
        "apiVersion": "[variables('networkApiVersion')]",
        "location": "[variables('location')]",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[variables('vnetAddressPrefix')]"
                ]
            },
            "subnets": [
                {
                    "name": "[variables('subnetName')]",
                    "properties": {
                        "addressPrefix": "[variables('subnetPrefix')]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPName')]",
        "apiVersion": "2016-11-01",
        "location": "[variables('location')]",
        "properties": {
            "publicIPAllocationMethod": "Dynamic",
            "dnsSettings": {
                "domainNameLabel": "[toLower(parameters('vmNameTwin'))]"
            },
            "idleTimeoutInMinutes": 4
        }
    },
    {
        "comments": "Network interface used by the VM",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('nicName')]",
        "apiVersion": "[variables('networkApiVersion')]",
        "location": "[variables('location')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
            "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        ],
        "properties": {
            "ipConfigurations": [
                {
                    "name": "ipconfig1",
                    "properties": {
                        "privateIPAddress": "10.0.0.4",
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
                        },
                        "subnet": {
                            "id": "[variables('subnetResourceId')]"
                        }
                    }
                }
            ],
            "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            }
        }
    },
    {
        "comments": "VM running the microservices",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[parameters('vmNameTwin')]",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[variables('location')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
            "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
        ],
        "properties": {
            "hardwareProfile": {
                "vmSize": "[parameters('vmSizeTwin')]"
            },
            "osProfile": {
                "computerName": "[parameters('vmNameTwin')]",
                "adminUsername": "[parameters('adminUsernameTwin')]",
                "adminPassword": "[parameters('adminPasswordTwin')]"
            },
            "storageProfile": {
                "imageReference": {
                    "publisher": "[variables('imagePublisher')]",
                    "offer": "[variables('imageOffer')]",
                    "sku": "[parameters('ubuntuOSVersion')]",
                    "version": "latest"
                },
                "osDisk": {
                    "name": "osdisk1",
                    "vhd": {
                        "uri": "[concat('http://',parameters('storageName'),'.blob.',parameters('storageEndpointSuffix'),'/',variables('vmStorageAccountContainerName'),'/',variables('osDiskName'),'.vhd')]"
                    },
                    "caching": "ReadWrite",
                    "createOption": "FromImage"
                }
            },
            "networkProfile": {
                "networkInterfaces": [
                    {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                    }
                ]
            },
            "diagnosticsProfile": {
                "bootDiagnostics": {
                    "enabled": "true",
                    "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', parameters('storageName')), '2016-01-01').primaryEndpoints.blob)]"
                }
            }
        }
    },
    {
        "comments": "One time script execution to prepare the VM environment",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(parameters('vmNameTwin'), '/', 'scriptextensions')]",
        "apiVersion": "[variables('computeApiVersion')]",
        "location": "[variables('location')]",
        "dependsOn": [
            "[resourceId('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]",
            "[resourceId('Microsoft.DocumentDb/databaseAccounts/', parameters('documentDbName'))]",
            "[variables('eventHubNamespaceResourceId')]"
        ],
        "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
                "fileUris": [
                    "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/deploy/vm/setup.sh')]",
                    "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/deploy/vm/ctrl.sh')]",
                    "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/deploy/vm/docker-compose.yml')]",
                    "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/deploy/vm/nginx.conf')]"
                ]
            },
            "protectedSettings": {
                "commandToExecute": "[concat('sh setup.sh ', ' --unsafe false --admin ', concat('\"', parameters('adminUsernameTwin'), '\"'), ' --registry-prefix ', concat('\"', parameters('containerRegistryPrefix'), '\"'), ' --hostname ', concat('\"', variables('vmFQDN'), '\"'), ' --ssl-certificate-key ', concat('\"', parameters('adminPasswordTwin'), '\"'), ' --ssl-certificate ', concat('\"', parameters('remoteEndpointCertificate'), '\"'), ' --auth-type aad ', ' --auth-audience ', concat('\"', parameters('authAudience'), '\"'), ' --aad-appid ', concat('\"', parameters('aadClientIdTwin'), '\"'), ' --aad-tenant ', concat('\"', parameters('aadTenantId'), '\"'), ' --aad-instance ', concat('\"', parameters('aadInstance'), '\"'), ' --iothub-connstring ', concat('\"', 'HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey, '\"'), ' --docdb-connstring ', concat('\"', 'AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';', '\"'), ' --iothub-name ', concat('\"', reference(variables('iotHubResourceId')).eventHubEndpoints.events.path, '\"'), ' --iothub-endpoint ', concat('\"', reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint, '\"'), ' --azureblob-account ', concat('\"', parameters('storageName'), '\"'), ' --azureblob-key ', concat('\"', listKeys(variables('storageId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, '\"'), ' --azureblob-endpoint-suffix ',  concat('\"', parameters('storageEndpointSuffix'), '\"'), ' --release-version ', concat('\"', variables('servicesBranch'), '\"'), ' --iothub-consumer-group ', concat('\"', variables('onboardingConsumerGroupName'), '\"'), ' --evenhub-connstring ', concat('\"Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('eventHubKeyName'), ';SharedAccessKey=', listkeys(variables('eventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey, '\"'), ' --eventhub-name ', parameters('eventHubName'))]"
            }
        }
    }

  ],
    "outputs": {
        "iotHubOwnerConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]"
        },
        "iotHubEventHubName": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId'), variables('iotHubVersion')).eventHubEndpoints.events.path]"
        },
        "iotHubEventHubEndpointIotHubOwnerConnectionString": {
            "type": "string",
            "value": "[concat('Endpoint=', reference(variables('iotHubResourceId'), variables('iotHubVersion')).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]"
        },
        "iotHubTelemetryConsumerGroup": {
            "type": "string",
            "value": "[variables('telemetryCGName')]"
        },
        "iotHubRdxConsumerGroup": {
            "type": "string",
            "value": "[variables('rdxCGName')]"
        },
        "mapApiQueryKey": {
            "type": "string",
            "value": "[listkeys(variables('azureMapsName'), variables('azureMapsVersion')).primaryKey]"
        },
        "storageConnectionString": {
            "type": "string",
            "value": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageId'), variables('storageVersion')).keys[0].value)]"
        },
        "rdxEnvironmentId": {
            "value": "[reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('rdxEnvironmentName'))).dataAccessId]",
            "type": "string"
        },
        "rdxDnsName": {
            "value": "[parameters('rdxDnsName')]",
            "type": "string"
        },
        "iotHubName": {
            "value": "[parameters('iotHubName')]",
            "type": "string"
        },
        "storageName": {
            "value": "[parameters('storageName')]",
            "type": "string"
        },
        "storageId": {
            "value": "[variables('storageId')]",
            "type": "string"
        },
        "azureWebsite": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0])]"
        },
        "vmFQDN": {
            "type": "string",
            "value": "[reference(variables('publicIPName')).dnsSettings.fqdn]"
        },
        "adminUsernameTwin": {
            "type": "string",
            "value": "[parameters('adminUsernameTwin')]"
        }
    }
}

